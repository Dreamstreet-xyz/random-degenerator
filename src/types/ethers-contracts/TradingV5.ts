/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace StorageInterfaceV5 {
  export type TradeStruct = {
    trader: string;
    pairIndex: BigNumberish;
    index: BigNumberish;
    initialPosToken: BigNumberish;
    positionSizeDai: BigNumberish;
    openPrice: BigNumberish;
    buy: boolean;
    leverage: BigNumberish;
    tp: BigNumberish;
    sl: BigNumberish;
  };

  export type TradeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    initialPosToken: BigNumber;
    positionSizeDai: BigNumber;
    openPrice: BigNumber;
    buy: boolean;
    leverage: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
  };

  export type PendingMarketOrderStruct = {
    trade: StorageInterfaceV5.TradeStruct;
    block: BigNumberish;
    wantedPrice: BigNumberish;
    slippageP: BigNumberish;
    spreadReductionP: BigNumberish;
    tokenId: BigNumberish;
  };

  export type PendingMarketOrderStructOutput = [
    StorageInterfaceV5.TradeStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trade: StorageInterfaceV5.TradeStructOutput;
    block: BigNumber;
    wantedPrice: BigNumber;
    slippageP: BigNumber;
    spreadReductionP: BigNumber;
    tokenId: BigNumber;
  };
}

export interface TradingV5Interface extends utils.Interface {
  contractName: "TradingV5";
  functions: {
    "cancelOpenLimitOrder(uint256,uint256)": FunctionFragment;
    "closeTradeMarket(uint256,uint256)": FunctionFragment;
    "closeTradeMarketTimeout(uint256)": FunctionFragment;
    "executeNftOrder(uint8,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isPaused()": FunctionFragment;
    "limitOrdersTimelock()": FunctionFragment;
    "maxPosDaiP()": FunctionFragment;
    "minPosDai()": FunctionFragment;
    "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),bool,uint256,uint256,address)": FunctionFragment;
    "openTradeMarketTimeout(uint256)": FunctionFragment;
    "orderTimeout()": FunctionFragment;
    "pause()": FunctionFragment;
    "setLimitOrdersTimelock(uint256)": FunctionFragment;
    "setMaxPosDaiP(uint256)": FunctionFragment;
    "setMinPosDai(uint256)": FunctionFragment;
    "setOrderTimeout(uint256)": FunctionFragment;
    "setStorageT(address)": FunctionFragment;
    "storageT()": FunctionFragment;
    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateSl(uint256,uint256,uint256)": FunctionFragment;
    "updateTp(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelOpenLimitOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarketTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeNftOrder",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limitOrdersTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPosDaiP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minPosDai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openTrade",
    values: [
      StorageInterfaceV5.TradeStruct,
      boolean,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradeMarketTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLimitOrdersTimelock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPosDaiP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPosDai",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStorageT", values: [string]): string;
  encodeFunctionData(functionFragment: "storageT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOpenLimitOrder",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSl",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeNftOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitOrdersTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPosDaiP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minPosDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLimitOrdersTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPosDaiP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPosDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storageT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateTp", data: BytesLike): Result;

  events: {
    "AddressUpdated(string,address)": EventFragment;
    "ChainlinkCallbackTimeout(uint256,tuple)": EventFragment;
    "CouldNotCloseTrade(address,uint256,uint256,string)": EventFragment;
    "MarketOrderInitiated(address,uint256,bool,uint256)": EventFragment;
    "NftOrderInitiated(address,address,uint256,uint256)": EventFragment;
    "NumberUpdated(string,uint256)": EventFragment;
    "OpenLimitCanceled(address,uint256,uint256)": EventFragment;
    "OpenLimitPlaced(address,uint256,uint256)": EventFragment;
    "OpenLimitUpdated(address,uint256,uint256)": EventFragment;
    "Pause(bool)": EventFragment;
    "SlUpdated(address,uint256,uint256)": EventFragment;
    "TpUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCallbackTimeout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CouldNotCloseTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOrderInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftOrderInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TpUpdated"): EventFragment;
}

export type AddressUpdatedEvent = TypedEvent<
  [string, string],
  { name: string; a: string }
>;

export type AddressUpdatedEventFilter = TypedEventFilter<AddressUpdatedEvent>;

export type ChainlinkCallbackTimeoutEvent = TypedEvent<
  [BigNumber, StorageInterfaceV5.PendingMarketOrderStructOutput],
  {
    orderId: BigNumber;
    order: StorageInterfaceV5.PendingMarketOrderStructOutput;
  }
>;

export type ChainlinkCallbackTimeoutEventFilter =
  TypedEventFilter<ChainlinkCallbackTimeoutEvent>;

export type CouldNotCloseTradeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { trader: string; pairIndex: BigNumber; index: BigNumber; message: string }
>;

export type CouldNotCloseTradeEventFilter =
  TypedEventFilter<CouldNotCloseTradeEvent>;

export type MarketOrderInitiatedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  { trader: string; pairIndex: BigNumber; open: boolean; orderId: BigNumber }
>;

export type MarketOrderInitiatedEventFilter =
  TypedEventFilter<MarketOrderInitiatedEvent>;

export type NftOrderInitiatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    nftHolder: string;
    trader: string;
    pairIndex: BigNumber;
    orderId: BigNumber;
  }
>;

export type NftOrderInitiatedEventFilter =
  TypedEventFilter<NftOrderInitiatedEvent>;

export type NumberUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { name: string; value: BigNumber }
>;

export type NumberUpdatedEventFilter = TypedEventFilter<NumberUpdatedEvent>;

export type OpenLimitCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type OpenLimitCanceledEventFilter =
  TypedEventFilter<OpenLimitCanceledEvent>;

export type OpenLimitPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type OpenLimitPlacedEventFilter = TypedEventFilter<OpenLimitPlacedEvent>;

export type OpenLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type OpenLimitUpdatedEventFilter =
  TypedEventFilter<OpenLimitUpdatedEvent>;

export type PauseEvent = TypedEvent<[boolean], { paused: boolean }>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type SlUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type SlUpdatedEventFilter = TypedEventFilter<SlUpdatedEvent>;

export type TpUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type TpUpdatedEventFilter = TypedEventFilter<TpUpdatedEvent>;

export interface TradingV5 extends BaseContract {
  contractName: "TradingV5";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradingV5Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPosDaiP(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPosDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _limit: boolean,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    orderTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPosDaiP(
      _maxP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPosDai(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrderTimeout(
      _orderTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStorageT(
      _storageT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storageT(overrides?: CallOverrides): Promise<[string]>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _slippageP: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOpenLimitOrder(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarket(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarketTimeout(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeNftOrder(
    _orderType: BigNumberish,
    _trader: string,
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _nftId: BigNumberish,
    _nftType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  maxPosDaiP(overrides?: CallOverrides): Promise<BigNumber>;

  minPosDai(overrides?: CallOverrides): Promise<BigNumber>;

  openTrade(
    t: StorageInterfaceV5.TradeStruct,
    _limit: boolean,
    _spreadReductionId: BigNumberish,
    _slippageP: BigNumberish,
    _referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openTradeMarketTimeout(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  orderTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitOrdersTimelock(
    _blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPosDaiP(
    _maxP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPosDai(
    _min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrderTimeout(
    _orderTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStorageT(
    _storageT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storageT(overrides?: CallOverrides): Promise<string>;

  updateOpenLimitOrder(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _price: BigNumberish,
    _slippageP: BigNumberish,
    _tp: BigNumberish,
    _sl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSl(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _newSl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTp(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _newTp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDaiP(overrides?: CallOverrides): Promise<BigNumber>;

    minPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _limit: boolean,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    orderTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPosDaiP(
      _maxP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPosDai(_min: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOrderTimeout(
      _orderTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStorageT(_storageT: string, overrides?: CallOverrides): Promise<void>;

    storageT(overrides?: CallOverrides): Promise<string>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _slippageP: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressUpdated(string,address)"(
      name?: null,
      a?: null
    ): AddressUpdatedEventFilter;
    AddressUpdated(name?: null, a?: null): AddressUpdatedEventFilter;

    "ChainlinkCallbackTimeout(uint256,tuple)"(
      orderId?: null,
      order?: null
    ): ChainlinkCallbackTimeoutEventFilter;
    ChainlinkCallbackTimeout(
      orderId?: null,
      order?: null
    ): ChainlinkCallbackTimeoutEventFilter;

    "CouldNotCloseTrade(address,uint256,uint256,string)"(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null,
      message?: null
    ): CouldNotCloseTradeEventFilter;
    CouldNotCloseTrade(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null,
      message?: null
    ): CouldNotCloseTradeEventFilter;

    "MarketOrderInitiated(address,uint256,bool,uint256)"(
      trader?: null,
      pairIndex?: null,
      open?: null,
      orderId?: null
    ): MarketOrderInitiatedEventFilter;
    MarketOrderInitiated(
      trader?: null,
      pairIndex?: null,
      open?: null,
      orderId?: null
    ): MarketOrderInitiatedEventFilter;

    "NftOrderInitiated(address,address,uint256,uint256)"(
      nftHolder?: null,
      trader?: null,
      pairIndex?: null,
      orderId?: null
    ): NftOrderInitiatedEventFilter;
    NftOrderInitiated(
      nftHolder?: null,
      trader?: null,
      pairIndex?: null,
      orderId?: null
    ): NftOrderInitiatedEventFilter;

    "NumberUpdated(string,uint256)"(
      name?: null,
      value?: null
    ): NumberUpdatedEventFilter;
    NumberUpdated(name?: null, value?: null): NumberUpdatedEventFilter;

    "OpenLimitCanceled(address,uint256,uint256)"(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): OpenLimitCanceledEventFilter;
    OpenLimitCanceled(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): OpenLimitCanceledEventFilter;

    "OpenLimitPlaced(address,uint256,uint256)"(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): OpenLimitPlacedEventFilter;
    OpenLimitPlaced(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): OpenLimitPlacedEventFilter;

    "OpenLimitUpdated(address,uint256,uint256)"(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): OpenLimitUpdatedEventFilter;
    OpenLimitUpdated(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): OpenLimitUpdatedEventFilter;

    "Pause(bool)"(paused?: null): PauseEventFilter;
    Pause(paused?: null): PauseEventFilter;

    "SlUpdated(address,uint256,uint256)"(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): SlUpdatedEventFilter;
    SlUpdated(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): SlUpdatedEventFilter;

    "TpUpdated(address,uint256,uint256)"(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): TpUpdatedEventFilter;
    TpUpdated(
      trader?: string | null,
      pairIndex?: BigNumberish | null,
      index?: null
    ): TpUpdatedEventFilter;
  };

  estimateGas: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDaiP(overrides?: CallOverrides): Promise<BigNumber>;

    minPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _limit: boolean,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    orderTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPosDaiP(
      _maxP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPosDai(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrderTimeout(
      _orderTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStorageT(
      _storageT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storageT(overrides?: CallOverrides): Promise<BigNumber>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _slippageP: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrdersTimelock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPosDaiP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPosDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _limit: boolean,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    orderTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPosDaiP(
      _maxP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPosDai(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrderTimeout(
      _orderTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStorageT(
      _storageT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storageT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _slippageP: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
