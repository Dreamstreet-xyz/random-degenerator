/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace StorageInterfaceV5 {
  export type TradeStruct = {
    trader: string;
    pairIndex: BigNumberish;
    index: BigNumberish;
    initialPosToken: BigNumberish;
    positionSizeDai: BigNumberish;
    openPrice: BigNumberish;
    buy: boolean;
    leverage: BigNumberish;
    tp: BigNumberish;
    sl: BigNumberish;
  };

  export type TradeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    initialPosToken: BigNumber;
    positionSizeDai: BigNumber;
    openPrice: BigNumber;
    buy: boolean;
    leverage: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
  };

  export type PendingMarketOrderStruct = {
    trade: StorageInterfaceV5.TradeStruct;
    block: BigNumberish;
    wantedPrice: BigNumberish;
    slippageP: BigNumberish;
    spreadReductionP: BigNumberish;
    tokenId: BigNumberish;
  };

  export type PendingMarketOrderStructOutput = [
    StorageInterfaceV5.TradeStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trade: StorageInterfaceV5.TradeStructOutput;
    block: BigNumber;
    wantedPrice: BigNumber;
    slippageP: BigNumber;
    spreadReductionP: BigNumber;
    tokenId: BigNumber;
  };
}

export interface TradingV6Interface extends utils.Interface {
  contractName: "TradingV6";
  functions: {
    "cancelOpenLimitOrder(uint256,uint256)": FunctionFragment;
    "closeTradeMarket(uint256,uint256)": FunctionFragment;
    "closeTradeMarketTimeout(uint256)": FunctionFragment;
    "done()": FunctionFragment;
    "executeNftOrder(uint8,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isDone()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "limitOrdersTimelock()": FunctionFragment;
    "marketOrdersTimeout()": FunctionFragment;
    "maxPosDai()": FunctionFragment;
    "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,uint256,address)": FunctionFragment;
    "openTradeMarketTimeout(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "setLimitOrdersTimelock(uint256)": FunctionFragment;
    "setMarketOrdersTimeout(uint256)": FunctionFragment;
    "setMaxPosDai(uint256)": FunctionFragment;
    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateSl(uint256,uint256,uint256)": FunctionFragment;
    "updateTp(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelOpenLimitOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarketTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "done", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeNftOrder",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "isDone", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limitOrdersTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrdersTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxPosDai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openTrade",
    values: [
      StorageInterfaceV5.TradeStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradeMarketTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLimitOrdersTimelock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketOrdersTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPosDai",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOpenLimitOrder",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSl",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "done", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeNftOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitOrdersTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOrdersTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPosDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLimitOrdersTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketOrdersTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPosDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateTp", data: BytesLike): Result;

  events: {
    "AddressUpdated(string,address)": EventFragment;
    "ChainlinkCallbackTimeout(uint256,tuple)": EventFragment;
    "CouldNotCloseTrade(address,uint256,uint256)": EventFragment;
    "Done(bool)": EventFragment;
    "MarketOrderInitiated(address,uint256,bool,uint256)": EventFragment;
    "NftOrderInitiated(address,address,uint256,uint256)": EventFragment;
    "NftOrderSameBlock(address,address,uint256)": EventFragment;
    "NumberUpdated(string,uint256)": EventFragment;
    "OpenLimitCanceled(address,uint256,uint256)": EventFragment;
    "OpenLimitPlaced(address,uint256,uint256)": EventFragment;
    "OpenLimitUpdated(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Paused(bool)": EventFragment;
    "SlUpdateInitiated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "SlUpdated(address,uint256,uint256,uint256)": EventFragment;
    "TpUpdated(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCallbackTimeout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CouldNotCloseTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Done"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOrderInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftOrderInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftOrderSameBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlUpdateInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TpUpdated"): EventFragment;
}

export type AddressUpdatedEvent = TypedEvent<
  [string, string],
  { name: string; a: string }
>;

export type AddressUpdatedEventFilter = TypedEventFilter<AddressUpdatedEvent>;

export type ChainlinkCallbackTimeoutEvent = TypedEvent<
  [BigNumber, StorageInterfaceV5.PendingMarketOrderStructOutput],
  {
    orderId: BigNumber;
    order: StorageInterfaceV5.PendingMarketOrderStructOutput;
  }
>;

export type ChainlinkCallbackTimeoutEventFilter =
  TypedEventFilter<ChainlinkCallbackTimeoutEvent>;

export type CouldNotCloseTradeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type CouldNotCloseTradeEventFilter =
  TypedEventFilter<CouldNotCloseTradeEvent>;

export type DoneEvent = TypedEvent<[boolean], { done: boolean }>;

export type DoneEventFilter = TypedEventFilter<DoneEvent>;

export type MarketOrderInitiatedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  { trader: string; pairIndex: BigNumber; open: boolean; orderId: BigNumber }
>;

export type MarketOrderInitiatedEventFilter =
  TypedEventFilter<MarketOrderInitiatedEvent>;

export type NftOrderInitiatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    nftHolder: string;
    trader: string;
    pairIndex: BigNumber;
    orderId: BigNumber;
  }
>;

export type NftOrderInitiatedEventFilter =
  TypedEventFilter<NftOrderInitiatedEvent>;

export type NftOrderSameBlockEvent = TypedEvent<
  [string, string, BigNumber],
  { nftHolder: string; trader: string; pairIndex: BigNumber }
>;

export type NftOrderSameBlockEventFilter =
  TypedEventFilter<NftOrderSameBlockEvent>;

export type NumberUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { name: string; value: BigNumber }
>;

export type NumberUpdatedEventFilter = TypedEventFilter<NumberUpdatedEvent>;

export type OpenLimitCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type OpenLimitCanceledEventFilter =
  TypedEventFilter<OpenLimitCanceledEvent>;

export type OpenLimitPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber }
>;

export type OpenLimitPlacedEventFilter = TypedEventFilter<OpenLimitPlacedEvent>;

export type OpenLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    newPrice: BigNumber;
    newTp: BigNumber;
    newSl: BigNumber;
  }
>;

export type OpenLimitUpdatedEventFilter =
  TypedEventFilter<OpenLimitUpdatedEvent>;

export type PausedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type SlUpdateInitiatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    newSl: BigNumber;
    orderId: BigNumber;
  }
>;

export type SlUpdateInitiatedEventFilter =
  TypedEventFilter<SlUpdateInitiatedEvent>;

export type SlUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber; newSl: BigNumber }
>;

export type SlUpdatedEventFilter = TypedEventFilter<SlUpdatedEvent>;

export type TpUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { trader: string; pairIndex: BigNumber; index: BigNumber; newTp: BigNumber }
>;

export type TpUpdatedEventFilter = TypedEventFilter<TpUpdatedEvent>;

export interface TradingV6 extends BaseContract {
  contractName: "TradingV6";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradingV6Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelOpenLimitOrder(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closeTradeMarket(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closeTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    done(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "done()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeNftOrder(uint8,address,uint256,uint256,uint256,uint256)"(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDone(overrides?: CallOverrides): Promise<[boolean]>;

    "isDone()"(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "isPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "limitOrdersTimelock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    "marketOrdersTimeout()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPosDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPosDai()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,uint256,address)"(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLimitOrdersTimelock(uint256)"(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketOrdersTimeout(uint256)"(
      _marketOrdersTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPosDai(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxPosDai(uint256)"(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateSl(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateTp(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOpenLimitOrder(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelOpenLimitOrder(uint256,uint256)"(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarket(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closeTradeMarket(uint256,uint256)"(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarketTimeout(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closeTradeMarketTimeout(uint256)"(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  done(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "done()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeNftOrder(
    _orderType: BigNumberish,
    _trader: string,
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _nftId: BigNumberish,
    _nftType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeNftOrder(uint8,address,uint256,uint256,uint256,uint256)"(
    _orderType: BigNumberish,
    _trader: string,
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _nftId: BigNumberish,
    _nftType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDone(overrides?: CallOverrides): Promise<boolean>;

  "isDone()"(overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  "isPaused()"(overrides?: CallOverrides): Promise<boolean>;

  limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  "limitOrdersTimelock()"(overrides?: CallOverrides): Promise<BigNumber>;

  marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  "marketOrdersTimeout()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPosDai()"(overrides?: CallOverrides): Promise<BigNumber>;

  openTrade(
    t: StorageInterfaceV5.TradeStruct,
    _type: BigNumberish,
    _spreadReductionId: BigNumberish,
    _slippageP: BigNumberish,
    _referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,uint256,address)"(
    t: StorageInterfaceV5.TradeStruct,
    _type: BigNumberish,
    _spreadReductionId: BigNumberish,
    _slippageP: BigNumberish,
    _referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openTradeMarketTimeout(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openTradeMarketTimeout(uint256)"(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitOrdersTimelock(
    _blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLimitOrdersTimelock(uint256)"(
    _blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketOrdersTimeout(
    _marketOrdersTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketOrdersTimeout(uint256)"(
    _marketOrdersTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPosDai(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxPosDai(uint256)"(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOpenLimitOrder(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _price: BigNumberish,
    _tp: BigNumberish,
    _sl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)"(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _price: BigNumberish,
    _tp: BigNumberish,
    _sl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSl(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _newSl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateSl(uint256,uint256,uint256)"(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _newSl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTp(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _newTp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateTp(uint256,uint256,uint256)"(
    _pairIndex: BigNumberish,
    _index: BigNumberish,
    _newTp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOpenLimitOrder(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeTradeMarket(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    done(overrides?: CallOverrides): Promise<void>;

    "done()"(overrides?: CallOverrides): Promise<void>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeNftOrder(uint8,address,uint256,uint256,uint256,uint256)"(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isDone(overrides?: CallOverrides): Promise<boolean>;

    "isDone()"(overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    "isPaused()"(overrides?: CallOverrides): Promise<boolean>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    "limitOrdersTimelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    "marketOrdersTimeout()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPosDai()"(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,uint256,address)"(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "openTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLimitOrdersTimelock(uint256)"(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketOrdersTimeout(uint256)"(
      _marketOrdersTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPosDai(_max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxPosDai(uint256)"(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSl(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTp(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressUpdated(string,address)"(
      name?: null,
      a?: null
    ): AddressUpdatedEventFilter;
    AddressUpdated(name?: null, a?: null): AddressUpdatedEventFilter;

    "ChainlinkCallbackTimeout(uint256,tuple)"(
      orderId?: null,
      order?: null
    ): ChainlinkCallbackTimeoutEventFilter;
    ChainlinkCallbackTimeout(
      orderId?: null,
      order?: null
    ): ChainlinkCallbackTimeoutEventFilter;

    "CouldNotCloseTrade(address,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): CouldNotCloseTradeEventFilter;
    CouldNotCloseTrade(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): CouldNotCloseTradeEventFilter;

    "Done(bool)"(done?: null): DoneEventFilter;
    Done(done?: null): DoneEventFilter;

    "MarketOrderInitiated(address,uint256,bool,uint256)"(
      trader?: null,
      pairIndex?: null,
      open?: null,
      orderId?: null
    ): MarketOrderInitiatedEventFilter;
    MarketOrderInitiated(
      trader?: null,
      pairIndex?: null,
      open?: null,
      orderId?: null
    ): MarketOrderInitiatedEventFilter;

    "NftOrderInitiated(address,address,uint256,uint256)"(
      nftHolder?: null,
      trader?: null,
      pairIndex?: null,
      orderId?: null
    ): NftOrderInitiatedEventFilter;
    NftOrderInitiated(
      nftHolder?: null,
      trader?: null,
      pairIndex?: null,
      orderId?: null
    ): NftOrderInitiatedEventFilter;

    "NftOrderSameBlock(address,address,uint256)"(
      nftHolder?: null,
      trader?: null,
      pairIndex?: null
    ): NftOrderSameBlockEventFilter;
    NftOrderSameBlock(
      nftHolder?: null,
      trader?: null,
      pairIndex?: null
    ): NftOrderSameBlockEventFilter;

    "NumberUpdated(string,uint256)"(
      name?: null,
      value?: null
    ): NumberUpdatedEventFilter;
    NumberUpdated(name?: null, value?: null): NumberUpdatedEventFilter;

    "OpenLimitCanceled(address,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitCanceledEventFilter;
    OpenLimitCanceled(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitCanceledEventFilter;

    "OpenLimitPlaced(address,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitPlacedEventFilter;
    OpenLimitPlaced(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitPlacedEventFilter;

    "OpenLimitUpdated(address,uint256,uint256,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newPrice?: null,
      newTp?: null,
      newSl?: null
    ): OpenLimitUpdatedEventFilter;
    OpenLimitUpdated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newPrice?: null,
      newTp?: null,
      newSl?: null
    ): OpenLimitUpdatedEventFilter;

    "Paused(bool)"(paused?: null): PausedEventFilter;
    Paused(paused?: null): PausedEventFilter;

    "SlUpdateInitiated(address,uint256,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null,
      orderId?: null
    ): SlUpdateInitiatedEventFilter;
    SlUpdateInitiated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null,
      orderId?: null
    ): SlUpdateInitiatedEventFilter;

    "SlUpdated(address,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null
    ): SlUpdatedEventFilter;
    SlUpdated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null
    ): SlUpdatedEventFilter;

    "TpUpdated(address,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newTp?: null
    ): TpUpdatedEventFilter;
    TpUpdated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newTp?: null
    ): TpUpdatedEventFilter;
  };

  estimateGas: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelOpenLimitOrder(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closeTradeMarket(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closeTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    done(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "done()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeNftOrder(uint8,address,uint256,uint256,uint256,uint256)"(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDone(overrides?: CallOverrides): Promise<BigNumber>;

    "isDone()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "isPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    "limitOrdersTimelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    "marketOrdersTimeout()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPosDai()"(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,uint256,address)"(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLimitOrdersTimelock(uint256)"(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketOrdersTimeout(uint256)"(
      _marketOrdersTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPosDai(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxPosDai(uint256)"(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateSl(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateTp(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOpenLimitOrder(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarket(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closeTradeMarket(uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closeTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    done(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "done()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeNftOrder(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeNftOrder(uint8,address,uint256,uint256,uint256,uint256)"(
      _orderType: BigNumberish,
      _trader: string,
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _nftId: BigNumberish,
      _nftType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDone()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrdersTimelock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "limitOrdersTimelock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketOrdersTimeout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketOrdersTimeout()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPosDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPosDai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,uint256,address)"(
      t: StorageInterfaceV5.TradeStruct,
      _type: BigNumberish,
      _spreadReductionId: BigNumberish,
      _slippageP: BigNumberish,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openTradeMarketTimeout(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openTradeMarketTimeout(uint256)"(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitOrdersTimelock(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLimitOrdersTimelock(uint256)"(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketOrdersTimeout(uint256)"(
      _marketOrdersTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPosDai(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxPosDai(uint256)"(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOpenLimitOrder(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _price: BigNumberish,
      _tp: BigNumberish,
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSl(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateSl(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newSl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTp(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateTp(uint256,uint256,uint256)"(
      _pairIndex: BigNumberish,
      _index: BigNumberish,
      _newTp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
